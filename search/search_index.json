{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Dokumentation des PITAMy-Projekts","title":"Home"},{"location":"#home","text":"Dokumentation des PITAMy-Projekts","title":"Home"},{"location":"datenmodell/abteilung/","text":"Abteilung Beschreibung Abteilung/Organisationseinheit, der Mitarbeiter zugeordnet werden k\u00f6nnen. Eigenschaften Bezeichnung (de) Bezeichnung (en) Typ Beschreibung Abteilungs-ID Department ID Integer Die eindeutige ID der Abteilung. Standortk\u00fcrzel Location code String( ... ) Der Standort, dem die Abteilung zugeordnet ist. Abteilungsk\u00fcrzel Department code String(10) Das K\u00fcrzel der Abteilung. Muss in Kombination mit dem Standort eindeutig sein. Abteilungsname Department name String(50) Die Bezeichnung der Abteilung. Kostenstelle Cost center String(10) Die Kostenstelle, der die Abteilung zugeordnet ist. \u00dcbergeordnete Abteilung (ID) Superordinate Department (ID) Integer Die \u00fcbergeordnete Abteilung, der diese Abteilung zugeordnet ist. Implementierungen Die unten aufgef\u00fchrten Code-Ausschnitte sind u. U. gek\u00fcrzt. Die tats\u00e4chlichen Implementierungen k\u00f6nnen umfangreicher sein! Datenbank CREATE TABLE [ dbo ].[ Abteilung ]( [ AbteilungID ] [ int ] IDENTITY ( 1 , 1 ) NOT NULL , [ Standortkuerzel ] [ nvarchar ]( 5 ) NOT NULL , [ Abteilungskuerzel ] [ nvarchar ]( 10 ) NOT NULL , [ Abteilungsname ] [ nvarchar ]( 50 ) NOT NULL , [ Kostenstelle ] [ nvarchar ]( 10 ) NULL , [ Uebergeordnet ] [ int ] NULL , [ ErstelltAm ] [ datetime2 ]( 7 ) NOT NULL , [ ErstelltVon ] [ nvarchar ]( 75 ) NOT NULL , [ GeaendertAm ] [ datetime2 ]( 7 ) NULL , [ GeaendertVon ] [ nvarchar ]( 75 ) NULL , [ RecordID ] [ uniqueidentifier ] NOT NULL , CONSTRAINT [ PK_Abteilung ] PRIMARY KEY CLUSTERED ( [ AbteilungID ] ASC ) WITH ( PAD_INDEX = OFF , STATISTICS_NORECOMPUTE = OFF , IGNORE_DUP_KEY = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON ) ON [ PRIMARY ] ) ON [ PRIMARY ] Anwendung public class Department : ITrackable { public const int DepartmentCodeMaxLength = 10 ; public const int DepartmentNameMaxLength = 50 ; public const int CostCenterMaxLength = 10 ; [...] public int DepartmentId { get ; set ; } public string LocationCode { get ; set ; } public Location Location { get ; set ; } public string DepartmentCode { get ; set ; } public string DepartmentName { get ; set ; } public string CostCenter { get ; set ; } public List < Employee > Employees { get ; set ; } public int? SuperordinateDepartmentId { get ; set ; } public Department SuperordinateDepartment { get ; set ; } public List < Department > SubordinateDepartments { get ; set ; } public DateTime CreatedAt { get ; set ; } public string CreatedBy { get ; set ; } public DateTime ? LastUpdatedAt { get ; set ; } public string LastUpdatedBy { get ; set ; } public Guid RecordId { get ; set ; } public override string ToString () { return DepartmentCode + \" - \" + DepartmentName + \" (\" + LocationCode + \")\" ; } public override bool Equals ( object obj ) { if ( obj == null ) { return false ; } Department otherDepartment = ( obj as Department ); if ( otherDepartment == null ) { return false ; } if ( this . DepartmentId . Equals ( otherDepartment . DepartmentId )) { return true ; } else { return false ; } } public override int GetHashCode () { return DepartmentId . GetHashCode (); } } Transfer { \"departmentId\" : 3 , \"locationCode\" : \"DEE1\" , \"location\" : null , \"departmentCode\" : \"VWD\" , \"departmentName\" : \"Datenverarbeitung\" , \"costCenter\" : \"3660\" , \"employees\" : [], \"superordinateDepartmentId\" : 2 , \"superordinateDepartment\" : null , \"subordinateDepartments\" : [], \"createdAt\" : \"2019-08-01T12:35:00Z\" , \"createdBy\" : \"roelofsph\" , \"lastUpdatedAt\" : null , \"lastUpdatedBy\" : null , \"recordId\" : \"a4540940-cbb7-4b2f-aa1f-b53f1d1f4ae1\" }","title":"Abteilung"},{"location":"datenmodell/abteilung/#abteilung","text":"","title":"Abteilung"},{"location":"datenmodell/abteilung/#beschreibung","text":"Abteilung/Organisationseinheit, der Mitarbeiter zugeordnet werden k\u00f6nnen.","title":"Beschreibung"},{"location":"datenmodell/abteilung/#eigenschaften","text":"Bezeichnung (de) Bezeichnung (en) Typ Beschreibung Abteilungs-ID Department ID Integer Die eindeutige ID der Abteilung. Standortk\u00fcrzel Location code String( ... ) Der Standort, dem die Abteilung zugeordnet ist. Abteilungsk\u00fcrzel Department code String(10) Das K\u00fcrzel der Abteilung. Muss in Kombination mit dem Standort eindeutig sein. Abteilungsname Department name String(50) Die Bezeichnung der Abteilung. Kostenstelle Cost center String(10) Die Kostenstelle, der die Abteilung zugeordnet ist. \u00dcbergeordnete Abteilung (ID) Superordinate Department (ID) Integer Die \u00fcbergeordnete Abteilung, der diese Abteilung zugeordnet ist.","title":"Eigenschaften"},{"location":"datenmodell/abteilung/#implementierungen","text":"Die unten aufgef\u00fchrten Code-Ausschnitte sind u. U. gek\u00fcrzt. Die tats\u00e4chlichen Implementierungen k\u00f6nnen umfangreicher sein!","title":"Implementierungen"},{"location":"datenmodell/abteilung/#datenbank","text":"CREATE TABLE [ dbo ].[ Abteilung ]( [ AbteilungID ] [ int ] IDENTITY ( 1 , 1 ) NOT NULL , [ Standortkuerzel ] [ nvarchar ]( 5 ) NOT NULL , [ Abteilungskuerzel ] [ nvarchar ]( 10 ) NOT NULL , [ Abteilungsname ] [ nvarchar ]( 50 ) NOT NULL , [ Kostenstelle ] [ nvarchar ]( 10 ) NULL , [ Uebergeordnet ] [ int ] NULL , [ ErstelltAm ] [ datetime2 ]( 7 ) NOT NULL , [ ErstelltVon ] [ nvarchar ]( 75 ) NOT NULL , [ GeaendertAm ] [ datetime2 ]( 7 ) NULL , [ GeaendertVon ] [ nvarchar ]( 75 ) NULL , [ RecordID ] [ uniqueidentifier ] NOT NULL , CONSTRAINT [ PK_Abteilung ] PRIMARY KEY CLUSTERED ( [ AbteilungID ] ASC ) WITH ( PAD_INDEX = OFF , STATISTICS_NORECOMPUTE = OFF , IGNORE_DUP_KEY = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON ) ON [ PRIMARY ] ) ON [ PRIMARY ]","title":"Datenbank"},{"location":"datenmodell/abteilung/#anwendung","text":"public class Department : ITrackable { public const int DepartmentCodeMaxLength = 10 ; public const int DepartmentNameMaxLength = 50 ; public const int CostCenterMaxLength = 10 ; [...] public int DepartmentId { get ; set ; } public string LocationCode { get ; set ; } public Location Location { get ; set ; } public string DepartmentCode { get ; set ; } public string DepartmentName { get ; set ; } public string CostCenter { get ; set ; } public List < Employee > Employees { get ; set ; } public int? SuperordinateDepartmentId { get ; set ; } public Department SuperordinateDepartment { get ; set ; } public List < Department > SubordinateDepartments { get ; set ; } public DateTime CreatedAt { get ; set ; } public string CreatedBy { get ; set ; } public DateTime ? LastUpdatedAt { get ; set ; } public string LastUpdatedBy { get ; set ; } public Guid RecordId { get ; set ; } public override string ToString () { return DepartmentCode + \" - \" + DepartmentName + \" (\" + LocationCode + \")\" ; } public override bool Equals ( object obj ) { if ( obj == null ) { return false ; } Department otherDepartment = ( obj as Department ); if ( otherDepartment == null ) { return false ; } if ( this . DepartmentId . Equals ( otherDepartment . DepartmentId )) { return true ; } else { return false ; } } public override int GetHashCode () { return DepartmentId . GetHashCode (); } }","title":"Anwendung"},{"location":"datenmodell/abteilung/#transfer","text":"{ \"departmentId\" : 3 , \"locationCode\" : \"DEE1\" , \"location\" : null , \"departmentCode\" : \"VWD\" , \"departmentName\" : \"Datenverarbeitung\" , \"costCenter\" : \"3660\" , \"employees\" : [], \"superordinateDepartmentId\" : 2 , \"superordinateDepartment\" : null , \"subordinateDepartments\" : [], \"createdAt\" : \"2019-08-01T12:35:00Z\" , \"createdBy\" : \"roelofsph\" , \"lastUpdatedAt\" : null , \"lastUpdatedBy\" : null , \"recordId\" : \"a4540940-cbb7-4b2f-aa1f-b53f1d1f4ae1\" }","title":"Transfer"},{"location":"datenmodell/aenderung/","text":"\u00c4nderung Beschreibung Dient zur Erfassung von \u00c4nderungen an anderen Entit\u00e4ten. Eigenschaften Bezeichnung (de) Bezeichnung (en) Typ Beschreibung Eintrags-ID Entry ID Integer Die eindeutige ID der Abteilung \u00c4nderungstyp Change type String(10) Gibt an, welche Art von \u00c4nderung vorliegt Entit\u00e4tstyp Entity type String(100) Gibt an, welchen Typ (Klasse) die ge\u00e4nderte Entit\u00e4t hat Entit\u00e4ts-Record-ID Entity record ID Guid Die Record-ID der ge\u00e4nderten Entit\u00e4t Eigenschaftsname Property name String(75) Der Name der Eigenschaft, die ge\u00e4ndert wurde Alter Wert Old value (JSON-)String(max) Der alte Wert der ge\u00e4nderten Eigenschaft bzw. der Wert, der gel\u00f6scht wurde Neuer Wert New value (JSON-)String(max) Der neue Wert der ge\u00e4nderten Eigenschaft bzw der Wert, der hinzugef\u00fcgt wurde Ge\u00e4ndert am Changed at DateTime Der Zeitpunkt, an dem die \u00c4nderung durchgef\u00fchrt wurde Ge\u00e4ndert von Changed by String(75) Der Name des Benutzers, der die \u00c4nderung durchgef\u00fchrt hat Implementierungen Die unten aufgef\u00fchrten Code-Ausschnitte sind u. U. gek\u00fcrzt. Die tats\u00e4chlichen Implementierungen k\u00f6nnen umfangreicher sein! Datenbank CREATE TABLE [ dbo ].[ Aenderung ]( [ EintragID ] [ int ] IDENTITY ( 1 , 1 ) NOT NULL , [ Typ ] [ nvarchar ]( 10 ) NOT NULL , [ Entitaetstyp ] [ nvarchar ]( 100 ) NOT NULL , [ EntitaetRecordID ] [ uniqueidentifier ] NOT NULL , [ EntitaetEigenschaft ] [ nvarchar ]( 75 ) NULL , [ WertAlt ] [ nvarchar ]( max ) NULL , [ WertNeu ] [ nvarchar ]( max ) NULL , [ GeaendertAm ] [ datetime2 ]( 7 ) NOT NULL , [ GeaendertVon ] [ nvarchar ]( 75 ) NOT NULL , CONSTRAINT [ PK_Aenderung ] PRIMARY KEY CLUSTERED ( [ EintragID ] ASC ) WITH ( PAD_INDEX = OFF , STATISTICS_NORECOMPUTE = OFF , IGNORE_DUP_KEY = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON ) ON [ PRIMARY ] ) ON [ PRIMARY ] TEXTIMAGE_ON [ PRIMARY ] Anwendung public class ChangelogEntry { public int EntryId { get ; set ; } public string ChangeType { get ; set ; } public string EntityType { get ; set ; } public Guid RecordId { get ; set ; } public string PropertyName { get ; set ; } public string OldValue { get ; set ; } public string NewValue { get ; set ; } public DateTime ChangedAt { get ; set ; } public string ChangedBy { get ; set ; } } Transfer { \"entryId\" : 49 , \"changeType\" : \"Update\" , \"entityType\" : \"Probat.Pitamy.Shared.Models.Hardware\" , \"recordId\" : \"b96595a9-0ed8-4d43-b81b-f65c7e583430\" , \"propertyName\" : \"HardwareNo\" , \"oldValue\" : \"3\" , \"newValue\" : \"1\" , \"changedAt\" : \"2020-05-21T22:44:48.7617691Z\" , \"changedBy\" : \"Philip\" }","title":"\u00c4nderung"},{"location":"datenmodell/aenderung/#anderung","text":"","title":"\u00c4nderung"},{"location":"datenmodell/aenderung/#beschreibung","text":"Dient zur Erfassung von \u00c4nderungen an anderen Entit\u00e4ten.","title":"Beschreibung"},{"location":"datenmodell/aenderung/#eigenschaften","text":"Bezeichnung (de) Bezeichnung (en) Typ Beschreibung Eintrags-ID Entry ID Integer Die eindeutige ID der Abteilung \u00c4nderungstyp Change type String(10) Gibt an, welche Art von \u00c4nderung vorliegt Entit\u00e4tstyp Entity type String(100) Gibt an, welchen Typ (Klasse) die ge\u00e4nderte Entit\u00e4t hat Entit\u00e4ts-Record-ID Entity record ID Guid Die Record-ID der ge\u00e4nderten Entit\u00e4t Eigenschaftsname Property name String(75) Der Name der Eigenschaft, die ge\u00e4ndert wurde Alter Wert Old value (JSON-)String(max) Der alte Wert der ge\u00e4nderten Eigenschaft bzw. der Wert, der gel\u00f6scht wurde Neuer Wert New value (JSON-)String(max) Der neue Wert der ge\u00e4nderten Eigenschaft bzw der Wert, der hinzugef\u00fcgt wurde Ge\u00e4ndert am Changed at DateTime Der Zeitpunkt, an dem die \u00c4nderung durchgef\u00fchrt wurde Ge\u00e4ndert von Changed by String(75) Der Name des Benutzers, der die \u00c4nderung durchgef\u00fchrt hat","title":"Eigenschaften"},{"location":"datenmodell/aenderung/#implementierungen","text":"Die unten aufgef\u00fchrten Code-Ausschnitte sind u. U. gek\u00fcrzt. Die tats\u00e4chlichen Implementierungen k\u00f6nnen umfangreicher sein!","title":"Implementierungen"},{"location":"datenmodell/aenderung/#datenbank","text":"CREATE TABLE [ dbo ].[ Aenderung ]( [ EintragID ] [ int ] IDENTITY ( 1 , 1 ) NOT NULL , [ Typ ] [ nvarchar ]( 10 ) NOT NULL , [ Entitaetstyp ] [ nvarchar ]( 100 ) NOT NULL , [ EntitaetRecordID ] [ uniqueidentifier ] NOT NULL , [ EntitaetEigenschaft ] [ nvarchar ]( 75 ) NULL , [ WertAlt ] [ nvarchar ]( max ) NULL , [ WertNeu ] [ nvarchar ]( max ) NULL , [ GeaendertAm ] [ datetime2 ]( 7 ) NOT NULL , [ GeaendertVon ] [ nvarchar ]( 75 ) NOT NULL , CONSTRAINT [ PK_Aenderung ] PRIMARY KEY CLUSTERED ( [ EintragID ] ASC ) WITH ( PAD_INDEX = OFF , STATISTICS_NORECOMPUTE = OFF , IGNORE_DUP_KEY = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON ) ON [ PRIMARY ] ) ON [ PRIMARY ] TEXTIMAGE_ON [ PRIMARY ]","title":"Datenbank"},{"location":"datenmodell/aenderung/#anwendung","text":"public class ChangelogEntry { public int EntryId { get ; set ; } public string ChangeType { get ; set ; } public string EntityType { get ; set ; } public Guid RecordId { get ; set ; } public string PropertyName { get ; set ; } public string OldValue { get ; set ; } public string NewValue { get ; set ; } public DateTime ChangedAt { get ; set ; } public string ChangedBy { get ; set ; } }","title":"Anwendung"},{"location":"datenmodell/aenderung/#transfer","text":"{ \"entryId\" : 49 , \"changeType\" : \"Update\" , \"entityType\" : \"Probat.Pitamy.Shared.Models.Hardware\" , \"recordId\" : \"b96595a9-0ed8-4d43-b81b-f65c7e583430\" , \"propertyName\" : \"HardwareNo\" , \"oldValue\" : \"3\" , \"newValue\" : \"1\" , \"changedAt\" : \"2020-05-21T22:44:48.7617691Z\" , \"changedBy\" : \"Philip\" }","title":"Transfer"},{"location":"datenmodell/hersteller/","text":"Hersteller Beschreibung Hersteller dienen dazu, Hard- und Software, die von der gleichen Firma produziert wurden, zuverl\u00e4ssig zusammenfassen zu k\u00f6nnen. Eigenschaften Bezeichnung (de) Bezeichnung (en) Typ Beschreibung Hersteller-Name Manufacturer name String(50) Die Bezeichnung des Herstellers. Muss einzigartig sein! Implementierungen Die unten aufgef\u00fchrten Code-Ausschnitte sind u. U. gek\u00fcrzt. Die tats\u00e4chlichen Implementierungen k\u00f6nnen umfangreicher sein! Datenbank CREATE TABLE [ dbo ].[ Hersteller ]( [ Herstellername ] [ nvarchar ]( 50 ) NOT NULL , [ ErstelltAm ] [ datetime2 ]( 7 ) NOT NULL , [ ErstelltVon ] [ nvarchar ]( 75 ) NOT NULL , [ GeaendertAm ] [ datetime2 ]( 7 ) NULL , [ GeaendertVon ] [ nvarchar ]( 75 ) NULL , [ RecordID ] [ uniqueidentifier ] NOT NULL , CONSTRAINT [ PK_Hersteller ] PRIMARY KEY CLUSTERED ( [ Herstellername ] ASC ) WITH ( PAD_INDEX = OFF , STATISTICS_NORECOMPUTE = OFF , IGNORE_DUP_KEY = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON ) ON [ PRIMARY ] ) ON [ PRIMARY ] Anwendung public class Manufacturer : ITrackable { public const int ManufacturerNameMaxLength = 50 ; public string ManufacturerName { get ; set ; } public List < HardwareModel > Models { get ; set ; } public DateTime CreatedAt { get ; set ; } public string CreatedBy { get ; set ; } public DateTime ? LastUpdatedAt { get ; set ; } public string LastUpdatedBy { get ; set ; } public Guid RecordId { get ; set ; } public override string ToString () { return ManufacturerName ; } public override int GetHashCode () { if ( ManufacturerName == null ) { return 0 ; } else { return ManufacturerName . GetHashCode (); } } public override bool Equals ( object obj ) { if ( obj == null ) { return false ; } Manufacturer otherManufacturer = ( obj as Manufacturer ); if ( otherManufacturer == null ) { return false ; } if ( this . ManufacturerName . Equals ( otherManufacturer . ManufacturerName )) { return true ; } else { return false ; } } } Transfer { \"manufacturerName\" : \"Microsoft\" , \"models\" : null , \"createdAt\" : \"2020-02-16T20:42:12.2276411Z\" , \"createdBy\" : \"Philip\" , \"lastUpdatedAt\" : null , \"lastUpdatedBy\" : null , \"recordId\" : \"803f7754-0156-4b93-9dd1-e1e6512fc7bd\" }","title":"Hersteller"},{"location":"datenmodell/hersteller/#hersteller","text":"","title":"Hersteller"},{"location":"datenmodell/hersteller/#beschreibung","text":"Hersteller dienen dazu, Hard- und Software, die von der gleichen Firma produziert wurden, zuverl\u00e4ssig zusammenfassen zu k\u00f6nnen.","title":"Beschreibung"},{"location":"datenmodell/hersteller/#eigenschaften","text":"Bezeichnung (de) Bezeichnung (en) Typ Beschreibung Hersteller-Name Manufacturer name String(50) Die Bezeichnung des Herstellers. Muss einzigartig sein!","title":"Eigenschaften"},{"location":"datenmodell/hersteller/#implementierungen","text":"Die unten aufgef\u00fchrten Code-Ausschnitte sind u. U. gek\u00fcrzt. Die tats\u00e4chlichen Implementierungen k\u00f6nnen umfangreicher sein!","title":"Implementierungen"},{"location":"datenmodell/hersteller/#datenbank","text":"CREATE TABLE [ dbo ].[ Hersteller ]( [ Herstellername ] [ nvarchar ]( 50 ) NOT NULL , [ ErstelltAm ] [ datetime2 ]( 7 ) NOT NULL , [ ErstelltVon ] [ nvarchar ]( 75 ) NOT NULL , [ GeaendertAm ] [ datetime2 ]( 7 ) NULL , [ GeaendertVon ] [ nvarchar ]( 75 ) NULL , [ RecordID ] [ uniqueidentifier ] NOT NULL , CONSTRAINT [ PK_Hersteller ] PRIMARY KEY CLUSTERED ( [ Herstellername ] ASC ) WITH ( PAD_INDEX = OFF , STATISTICS_NORECOMPUTE = OFF , IGNORE_DUP_KEY = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON ) ON [ PRIMARY ] ) ON [ PRIMARY ]","title":"Datenbank"},{"location":"datenmodell/hersteller/#anwendung","text":"public class Manufacturer : ITrackable { public const int ManufacturerNameMaxLength = 50 ; public string ManufacturerName { get ; set ; } public List < HardwareModel > Models { get ; set ; } public DateTime CreatedAt { get ; set ; } public string CreatedBy { get ; set ; } public DateTime ? LastUpdatedAt { get ; set ; } public string LastUpdatedBy { get ; set ; } public Guid RecordId { get ; set ; } public override string ToString () { return ManufacturerName ; } public override int GetHashCode () { if ( ManufacturerName == null ) { return 0 ; } else { return ManufacturerName . GetHashCode (); } } public override bool Equals ( object obj ) { if ( obj == null ) { return false ; } Manufacturer otherManufacturer = ( obj as Manufacturer ); if ( otherManufacturer == null ) { return false ; } if ( this . ManufacturerName . Equals ( otherManufacturer . ManufacturerName )) { return true ; } else { return false ; } } }","title":"Anwendung"},{"location":"datenmodell/hersteller/#transfer","text":"{ \"manufacturerName\" : \"Microsoft\" , \"models\" : null , \"createdAt\" : \"2020-02-16T20:42:12.2276411Z\" , \"createdBy\" : \"Philip\" , \"lastUpdatedAt\" : null , \"lastUpdatedBy\" : null , \"recordId\" : \"803f7754-0156-4b93-9dd1-e1e6512fc7bd\" }","title":"Transfer"},{"location":"konzepte/aenderungsverfolgung/","text":"\u00c4nderungsverfolgung Einleitung Die Anwendung soll die M\u00f6glichkeit bieten, \u00c4nderungen an einer Entit\u00e4t nachverfolgen zu k\u00f6nnen. Hierzu m\u00fcssen diese in der Datenbank dokumententiert werden. Um dies f\u00fcr verschiedene Entit\u00e4tstypen relativ einfach m\u00f6glich zu machen, wurde eine typ-unabh\u00e4ngige L\u00f6sung implementiert, die bei Bedarf um die Besonderheiten bestimmter Typen erg\u00e4nzt werden kann. Beschreibung Interface ITrackable Jede Entit\u00e4t, f\u00fcr die generische \u00c4nderungsverfolgung genutzt werden soll, muss das ITrackable -Interface implementieren. Das Interface definiert die Eigenschaften, die zum Speichern wichtige Informationen f\u00fcr die \u00c4nderungsverfolgung n\u00f6tig sind. Au\u00dferdem sorgt es daf\u00fcr, dass die Entit\u00e4t, zus\u00e4tzlich zum eigentlichen Primary-Key, eine eindeutige Record-ID vom Typ Guid erh\u00e4lt. Eigenschaft Typ Beschreibung CreatedAt DateTime Zeitpunkt, an dem die Entit\u00e4t erstellt wurde. CreatedBy string Name des Benutzers, der die Entit\u00e4t erstellt hat. LastUpdatedAt DateTime Zeitpunkt der letzten Aktualisierung der Entit\u00e4t. LastUpdatedBy string Name des Benutzers, der die Entit\u00e4t zuletzt ge\u00e4ndert hat. RecordId Guid Erm\u00f6glicht es Entit\u00e4ten verschiedener Typen unabh\u00e4ngig vom eigentlichen Primary-Key zu identifizieren. Datenbank-Tabelle Aenderung Die \u00c4nderungen werden in der Datenbank-Tabelle Aenderung gespeichert (Aufbau s. ChangelogEntry ). Entit\u00e4t ChangelogEntry Die Datenbank-Eintr\u00e4ge werden innerhalb der Anwendung durch die Klasse ChangelogEntry repr\u00e4sentiert. Interface IDataService und Implementierung EFDataService Methoden zum Anlegen, Abrufen und L\u00f6schen von Eintr\u00e4gen sind im IDataService -Interface definiert und in der Klasse EFDataService implementiert. Methode Beschreibung CreateChangelogEntry Dient zum Anlegen eines neuen Eintrags in der Aenderung -Tabelle GetChangelogEntries Liefert die vorhandenen Eintr\u00e4ge zu der \u00fcbergebenen Record-ID. DeleteChangelogEntry L\u00f6scht den Datensatz mit der \u00fcbergebenen ID. Die Methode DeleteChangelogEntry dient nur dazu, Eintr\u00e4ge zu l\u00f6schen wenn, z. B. aufgrund einer Exception, die eigentliche \u00c4nderung nicht gespeichert wurde! \u00c4nderungsdatens\u00e4tze sollten unter normalen Umst\u00e4nden nicht gel\u00f6scht werden (k\u00f6nnen). \u00c4nderungserkennung in ManagerBase -Klasse Das Erfassen der \u00c4nderungen erfolgt ausschlie\u00dflich auf der Server-Seite in der verantwortlichen Manager -Klasse. Die Basis-Klasse ManagerBase bietet die Methode TrackChanges , die die Wert der Eigenschaften von zwei Objekten vergleicht und Abweichungen einen neuen \u00c4nderungsdatensatz in der Datenbank speichert. Eigenschaften, die nicht ber\u00fccksichtigt werden sollen, k\u00f6nnen \u00fcber die Liste PropertiesIgnoredByTracking ausgenommen werden. Wenn der Typ einer Eigenschaft IEnumerable implementiert, wird diese, inklusive der enthaltenen Objekte, in einen JSON-String umgewandelt. Beim Vergleich der JSON-Strings kann es zu Fehlern bei der Erkennung von \u00c4nderungen kommen, wenn Navigation-Properties in einem der Objekt geladen wurden und im anderen nicht. Die TrackChanges -Methode sollte in der Manager -Klasse im Rahmen der UpdateEntity -Methode aufgerufen werden. Individuelle \u00c4nderungserkennung \u00c4nderungen, die nicht \u00fcber die UpdateEntity -Methode gespeichert werden, k\u00f6nnen durch Standard-Implementierung nicht erfasst werden! Ein Beipiel hierf\u00fcr ist die Licenses -Eigenschaft der Computer -Klasse. Die enthaltenen ComputerLicense -Objekte werden \u00fcber einen eigenen Controller , bzw. Manager verwaltet. Die Erfassung der \u00c4nderungen muss daher individuell implementiert werden. Beim beschriebenen Beispiel innerhalb der ComputerLicensesManager -Klasse. Hierbei sollte das Anlegen, Bearbeiten und L\u00f6schen der Objekte dokumentiert werden. Die \u00c4nderungen sollten den \"Haupt\"-Entit\u00e4ten (bei ComputerLicense dem Computer und der Lizenz) zugeordnet werden. Bei der Implementierung unbedingt die Hinweise zur Verwendung der ChangelogEntry -Eigenschaften OldValue und NewValue beachten! Anzeige auf dem Client F\u00fcr die Anzeige der \u00c4nderungen an einer Entit\u00e4t stellt der Client den Dialog ChangelogDialogView bereit. Der Aufruf erfolgt das client-interne Nachrichtensystem: DialogRequestMessage message = new DialogRequestMessage < ITrackable >( Computer , ClientMessages . ChangelogShowDialog ); message . OwnerViewModel = this ; Messenger . Default . Send ( message , MessengerTokens . SharedDialogService ); Die Nachricht wird von der Implementierung des IShellDialogService -Interfaces ( ShellDialogService ) verarbeitet. Der Abruf der \u00c4nderungen erfolgt \u00fcber den ShellDataService ( IShellDataService ). Anpassung der Darstellung Der Changelog-Dialog kann u. a. komplexe Werte, die als JSON gespeichert wurden, nicht in einer lesbaren Form darstellen. F\u00fcr die Individualisierung der Darstellung besteht daher die M\u00f6glichkeit f\u00fcr einen Entit\u00e4tstypen eine Implementierung des IChangelogConfiguration -Interfaces \u00fcber den IoC-Container bereitzustellen. Methode Beschreibung CheckIgnoredProperties Erm\u00f6glicht es, \u00c4nderungen an bestimmten Eigenschaften (z. B. Ids) nicht anzuzeigen FormatValue Formatiert den in der Datenbank abgelegten String-Wert in eine lesbare Form GetPropertyDisplayName Liefert f\u00fcr den deutschen bzw. englischen Text f\u00fcr die Eigenschaft IStringResources stringResources = SimpleIoc . Default . GetInstance < IStringResources >(); SimpleIoc . Default . Register < IChangelogConfiguration >(() => new ComputerChangelogConfiguration ( stringResources ), nameof ( Computer )); Das ChangelogDialogViewModel l\u00e4dt die passende Configuration, falls vorhanden, nach dem Abruf der \u00c4nderungen aus der Datenbank. Changelog-Dialog f\u00fcr einen Computer","title":"\u00c4nderungsverfolgung"},{"location":"konzepte/aenderungsverfolgung/#anderungsverfolgung","text":"","title":"\u00c4nderungsverfolgung"},{"location":"konzepte/aenderungsverfolgung/#einleitung","text":"Die Anwendung soll die M\u00f6glichkeit bieten, \u00c4nderungen an einer Entit\u00e4t nachverfolgen zu k\u00f6nnen. Hierzu m\u00fcssen diese in der Datenbank dokumententiert werden. Um dies f\u00fcr verschiedene Entit\u00e4tstypen relativ einfach m\u00f6glich zu machen, wurde eine typ-unabh\u00e4ngige L\u00f6sung implementiert, die bei Bedarf um die Besonderheiten bestimmter Typen erg\u00e4nzt werden kann.","title":"Einleitung"},{"location":"konzepte/aenderungsverfolgung/#beschreibung","text":"","title":"Beschreibung"},{"location":"konzepte/aenderungsverfolgung/#interface-itrackable","text":"Jede Entit\u00e4t, f\u00fcr die generische \u00c4nderungsverfolgung genutzt werden soll, muss das ITrackable -Interface implementieren. Das Interface definiert die Eigenschaften, die zum Speichern wichtige Informationen f\u00fcr die \u00c4nderungsverfolgung n\u00f6tig sind. Au\u00dferdem sorgt es daf\u00fcr, dass die Entit\u00e4t, zus\u00e4tzlich zum eigentlichen Primary-Key, eine eindeutige Record-ID vom Typ Guid erh\u00e4lt. Eigenschaft Typ Beschreibung CreatedAt DateTime Zeitpunkt, an dem die Entit\u00e4t erstellt wurde. CreatedBy string Name des Benutzers, der die Entit\u00e4t erstellt hat. LastUpdatedAt DateTime Zeitpunkt der letzten Aktualisierung der Entit\u00e4t. LastUpdatedBy string Name des Benutzers, der die Entit\u00e4t zuletzt ge\u00e4ndert hat. RecordId Guid Erm\u00f6glicht es Entit\u00e4ten verschiedener Typen unabh\u00e4ngig vom eigentlichen Primary-Key zu identifizieren.","title":"Interface ITrackable"},{"location":"konzepte/aenderungsverfolgung/#datenbank-tabelle-aenderung","text":"Die \u00c4nderungen werden in der Datenbank-Tabelle Aenderung gespeichert (Aufbau s. ChangelogEntry ).","title":"Datenbank-Tabelle Aenderung"},{"location":"konzepte/aenderungsverfolgung/#entitat-changelogentry","text":"Die Datenbank-Eintr\u00e4ge werden innerhalb der Anwendung durch die Klasse ChangelogEntry repr\u00e4sentiert.","title":"Entit\u00e4t ChangelogEntry"},{"location":"konzepte/aenderungsverfolgung/#interface-idataservice-und-implementierung-efdataservice","text":"Methoden zum Anlegen, Abrufen und L\u00f6schen von Eintr\u00e4gen sind im IDataService -Interface definiert und in der Klasse EFDataService implementiert. Methode Beschreibung CreateChangelogEntry Dient zum Anlegen eines neuen Eintrags in der Aenderung -Tabelle GetChangelogEntries Liefert die vorhandenen Eintr\u00e4ge zu der \u00fcbergebenen Record-ID. DeleteChangelogEntry L\u00f6scht den Datensatz mit der \u00fcbergebenen ID. Die Methode DeleteChangelogEntry dient nur dazu, Eintr\u00e4ge zu l\u00f6schen wenn, z. B. aufgrund einer Exception, die eigentliche \u00c4nderung nicht gespeichert wurde! \u00c4nderungsdatens\u00e4tze sollten unter normalen Umst\u00e4nden nicht gel\u00f6scht werden (k\u00f6nnen).","title":"Interface IDataService und Implementierung EFDataService"},{"location":"konzepte/aenderungsverfolgung/#anderungserkennung-in-managerbase-klasse","text":"Das Erfassen der \u00c4nderungen erfolgt ausschlie\u00dflich auf der Server-Seite in der verantwortlichen Manager -Klasse. Die Basis-Klasse ManagerBase bietet die Methode TrackChanges , die die Wert der Eigenschaften von zwei Objekten vergleicht und Abweichungen einen neuen \u00c4nderungsdatensatz in der Datenbank speichert. Eigenschaften, die nicht ber\u00fccksichtigt werden sollen, k\u00f6nnen \u00fcber die Liste PropertiesIgnoredByTracking ausgenommen werden. Wenn der Typ einer Eigenschaft IEnumerable implementiert, wird diese, inklusive der enthaltenen Objekte, in einen JSON-String umgewandelt. Beim Vergleich der JSON-Strings kann es zu Fehlern bei der Erkennung von \u00c4nderungen kommen, wenn Navigation-Properties in einem der Objekt geladen wurden und im anderen nicht. Die TrackChanges -Methode sollte in der Manager -Klasse im Rahmen der UpdateEntity -Methode aufgerufen werden.","title":"\u00c4nderungserkennung in ManagerBase-Klasse"},{"location":"konzepte/aenderungsverfolgung/#individuelle-anderungserkennung","text":"\u00c4nderungen, die nicht \u00fcber die UpdateEntity -Methode gespeichert werden, k\u00f6nnen durch Standard-Implementierung nicht erfasst werden! Ein Beipiel hierf\u00fcr ist die Licenses -Eigenschaft der Computer -Klasse. Die enthaltenen ComputerLicense -Objekte werden \u00fcber einen eigenen Controller , bzw. Manager verwaltet. Die Erfassung der \u00c4nderungen muss daher individuell implementiert werden. Beim beschriebenen Beispiel innerhalb der ComputerLicensesManager -Klasse. Hierbei sollte das Anlegen, Bearbeiten und L\u00f6schen der Objekte dokumentiert werden. Die \u00c4nderungen sollten den \"Haupt\"-Entit\u00e4ten (bei ComputerLicense dem Computer und der Lizenz) zugeordnet werden. Bei der Implementierung unbedingt die Hinweise zur Verwendung der ChangelogEntry -Eigenschaften OldValue und NewValue beachten!","title":"Individuelle \u00c4nderungserkennung"},{"location":"konzepte/aenderungsverfolgung/#anzeige-auf-dem-client","text":"F\u00fcr die Anzeige der \u00c4nderungen an einer Entit\u00e4t stellt der Client den Dialog ChangelogDialogView bereit. Der Aufruf erfolgt das client-interne Nachrichtensystem: DialogRequestMessage message = new DialogRequestMessage < ITrackable >( Computer , ClientMessages . ChangelogShowDialog ); message . OwnerViewModel = this ; Messenger . Default . Send ( message , MessengerTokens . SharedDialogService ); Die Nachricht wird von der Implementierung des IShellDialogService -Interfaces ( ShellDialogService ) verarbeitet. Der Abruf der \u00c4nderungen erfolgt \u00fcber den ShellDataService ( IShellDataService ).","title":"Anzeige auf dem Client"},{"location":"konzepte/aenderungsverfolgung/#anpassung-der-darstellung","text":"Der Changelog-Dialog kann u. a. komplexe Werte, die als JSON gespeichert wurden, nicht in einer lesbaren Form darstellen. F\u00fcr die Individualisierung der Darstellung besteht daher die M\u00f6glichkeit f\u00fcr einen Entit\u00e4tstypen eine Implementierung des IChangelogConfiguration -Interfaces \u00fcber den IoC-Container bereitzustellen. Methode Beschreibung CheckIgnoredProperties Erm\u00f6glicht es, \u00c4nderungen an bestimmten Eigenschaften (z. B. Ids) nicht anzuzeigen FormatValue Formatiert den in der Datenbank abgelegten String-Wert in eine lesbare Form GetPropertyDisplayName Liefert f\u00fcr den deutschen bzw. englischen Text f\u00fcr die Eigenschaft IStringResources stringResources = SimpleIoc . Default . GetInstance < IStringResources >(); SimpleIoc . Default . Register < IChangelogConfiguration >(() => new ComputerChangelogConfiguration ( stringResources ), nameof ( Computer )); Das ChangelogDialogViewModel l\u00e4dt die passende Configuration, falls vorhanden, nach dem Abruf der \u00c4nderungen aus der Datenbank. Changelog-Dialog f\u00fcr einen Computer","title":"Anpassung der Darstellung"}]}